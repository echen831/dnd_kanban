{"version":3,"sources":["component/item.jsx","component/addItem.jsx","component/dnd.jsx","App.js","index.js"],"names":["Item","item","removeItem","update","grpIdx","itemIdx","addComment","removeComment","useState","edit","setEdit","name","setName","email","setEmail","comments","setComment","commentInput","useRef","className","length","map","comment","commentIdx","onClick","id","type","placeholder","ref","onChange","e","field","currentTarget","value","handleChange","current","AddItem","addItems","nameInput","emailInput","reset","onSubmit","data","preventDefault","handleSubmit","required","INITIALDATA","title","items","DND","list","setList","dragging","setDragging","dragItem","dragNode","handleDragEnter","params","currentItem","target","oldList","newList","JSON","parse","stringify","splice","handleDragEnd","removeEventListener","col","trim","push","slice","concat","text","getStyles","grp","key","onDragEnter","draggable","onDragStart","addEventListener","setTimeout","handleDragStart","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.623c1f52.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\n\nexport const Item = ({ item, update, removeItem, grpIdx, itemIdx, addComment, removeComment }) => {\n\n    const [edit, setEdit] = useState(false);\n\n    const [name, setName] = useState(item.name);\n    const [email, setEmail] = useState(item.email);\n    const [comments, setComment] = useState(item.comments);\n\n\n    const nameInput = useRef();\n    const emailInput = useRef();\n    const commentInput = useRef();\n\n    const handleAddComment = (comment, params) => {\n        addComment(comment, params);\n        setEdit(false);\n        commentInput.current.value = \"\";\n    }\n\n    const handleUpdate = (field, text, params) => {\n        update(field, text, params);\n\n        switch (field) {\n            case \"name\":\n                setEdit(false);\n                nameInput.current.value = \"\"\n                break;\n            case \"email\":\n                setEdit(false);\n                emailInput.current.value = \"\"\n                break;\n            case \"comment\":\n                setEdit(false);\n                commentInput.current.value = \"\"\n                break;\n            default:\n                break;\n        }\n    }\n\n    const handleSubmit = (e, data, params) => {\n        e.preventDefault();\n        update(data, params);\n        \n        nameInput.current.value = \"\";\n        emailInput.current.value = \"\";\n        commentInput.current.value = \"\";\n    }\n\n    const handleChange = (e, field) => {\n\n        switch (field) {\n            case \"name\":\n                setName(e.currentTarget.value);\n                break;\n            case \"email\":\n                setEmail(e.currentTarget.value)\n                break;\n            case \"comment\":\n                setComment(e.currentTarget.value)\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div className=\"item-container\" >\n            <div className=\"info-container\">\n                <p>{item.name.length ? item.name : 'Name'}</p>\n                <p>{item.email.length ? item.email : 'Email'}</p>\n                <ul>\n                    {item.comments.length ? item.comments.map((comment, commentIdx) => (\n                        <div>\n                            <p>{comment}</p>\n                            <p onClick={()=>removeComment({grpIdx, itemIdx, commentIdx})}>&times;</p>\n                        </div>\n                    )) : null}\n                </ul>\n                <div>\n                    <p id='edit-btn' onClick={() => setEdit(!edit)}>Add Comment</p>\n                    <p id='edit-btn' onClick={() => { removeItem({ grpIdx, itemIdx }); setEdit(!edit) }}>Delete</p>\n                </div>\n            </div>\n\n\n            <div className=\"edit-container\" id={!edit ? 'hide' : ''}>\n                {/* <div >\n                    <input type=\"text\" placeholder=\"Name\" value={name} ref={nameInput} onChange={(e) => handleChange(e, \"name\")}/>\n                    <button onClick={() => handleUpdate(\"name\", nameInput.current.value, { grpIdx, itemIdx })}>Update</button>\n                </div>\n                <div >\n                    <input type=\"text\" placeholder=\"Email\" value={email} ref={emailInput} onChange={(e) => handleChange(e, \"email\")}/>\n                    <button onClick={() => handleUpdate(\"email\", emailInput.current.value, { grpIdx, itemIdx })}>Update</button>\n                </div> */}\n                <div className='edit'>\n                    <textarea type=\"text\" placeholder=\"Comments\" ref={commentInput} onChange={(e) => handleChange(e, \"comment\")} />\n                    <button onClick={()=>handleAddComment(commentInput.current.value, {grpIdx, itemIdx})}>Add</button>\n                </div>\n                {/* <div>\n                    <p id='edit-btn' onClick={() => {removeItem({ grpIdx, itemIdx });setEdit(!edit)}}>Delete</p>\n                    <p id='edit-btn' onClick={() => setEdit(!edit)}>Close</p>\n                </div> */}\n            </div>\n        </div>    \n    )\n}","import React, { useRef, useState } from 'react';\n\n\nexport const AddItem = ({grpIdx, addItems}) => {\n\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n\n    const nameInput = useRef();\n    const emailInput = useRef();\n\n    const handleSubmit = (e, data) => {\n        e.preventDefault();\n        addItems(grpIdx, data);\n        reset();\n    }\n\n    const reset = () => {\n        nameInput.current.value = \"\";\n        emailInput.current.value = \"\";\n        setName(\"\");\n        setEmail(\"\");\n    }\n\n    const onChange = (e, field) => {\n        switch (field) {\n            case 'name':\n                setName(e.currentTarget.value);\n                break;\n            case 'email':\n                setEmail(e.currentTarget.value);\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <form onSubmit={(e) => handleSubmit(e, {name, email})}>\n            <input type=\"text\" placeholder=\"Name\" ref={nameInput} required onChange={(e)=>onChange(e,\"name\")}/>\n            <input type=\"text\" placeholder=\"Email\" ref={emailInput} required onChange={(e) => onChange(e, \"email\")}/>\n            <button type=\"submit\" >Add Candidate</button>\n        </form>\n    )\n}","import React, { useState, useRef } from 'react';\nimport { Item } from './item';\nimport { AddItem } from './addItem'\n\n//[Applied] [Phone Screen] [On site] [Offered] [Accepted] [Rejected]\n\nconst INITIALDATA = [\n    { title: 'Applied', items: [{ name: 'Eric One', email: 'e1@gmail.com', comments: [\"eric is great\", \"eric is awesome\"] }] },\n    { title: 'Phone Screen', items: [{ name: 'Eric Two', email: 'e2@gmail.com', comments: [] }] },\n    { title: 'On site', items: [] },\n    { title: 'Offered', items: [] },\n    { title: 'Accepted', items: [] },\n    { title: 'Rejected', items: [] },\n]\n\nexport const DND = () => {\n\n    const [ list, setList ] = useState(INITIALDATA);\n    const [dragging, setDragging] = useState(false);\n    // const [ editTitle, setEditTitle ] = useState(false);\n\n    const dragItem = useRef();\n    const dragNode = useRef();\n    // const textInput = useRef();\n\n    const handleDragStart = (e, params) => {\n        dragItem.current = params;\n        dragNode.current = e.target;\n        dragNode.current.addEventListener('dragend', handleDragEnd)\n        setTimeout( () => {\n            setDragging(true)\n        },0)\n    };\n\n    const handleDragEnter = (e, params) => {\n        const currentItem = dragItem.current;\n        if (e.target !== dragNode.current) {\n            setList(oldList => {\n                let newList = JSON.parse(JSON.stringify(oldList));\n                newList[params.grpIdx].items.splice(params.itemIdx, 0, newList[currentItem.grpIdx].items.splice(currentItem.itemIdx, 1)[0])\n                dragItem.current = params;\n                return newList\n            })\n        }\n    }\n\n    const handleDragEnd = () => {\n        setDragging(false);\n        dragNode.current.removeEventListener('dragend', handleDragEnd);\n        dragItem.current = null;\n        dragNode.current = null;\n    }\n\n    const addItems = (col, data) => {\n        let newList = [...list];\n\n        if(data.name.trim() !== \"\" && data.email.trim() !== \"\") {\n            newList[col].items.push({ name: data.name, email: data.email, comments: [] });\n            setList(newList)\n        }\n\n        // setList(oldList => {\n        //     let newList = JSON.parse(JSON.stringify(oldList))\n        //     newList[col].items.push({ name: '', email: '', phone: '' })\n        //     return newList\n        // })\n    }\n\n    const addComment = (comment, params) => {\n        let newList = [...list];\n\n        if(comment.trim() !== \"\") {\n            newList[params.grpIdx].items[params.itemIdx].comments.push(comment);\n            setList(newList);\n        }\n    }\n\n    const removeComment = (params) => {\n        let newList = [...list];\n        newList[params.grpIdx].items[params.itemIdx].comments = \n            newList[params.grpIdx].items[params.itemIdx].comments.slice(0,params.commentIdx)\n            .concat(newList[params.grpIdx].items[params.itemIdx].comments.slice(params.commentIdx + 1))\n        setList(newList);\n    }\n\n\n    const removeItem = (params) => {\n        let newList = [...list];\n        newList[params.grpIdx].items = newList[params.grpIdx].items.slice(0, params.itemIdx).concat(newList[params.grpIdx].items.slice(params.itemIdx + 1))\n        setList(newList)\n        // setList(oldList => {\n        //     let newList = JSON.parse(JSON.stringify(oldList))\n        //     newList[params.grpIdx].items = newList[params.grpIdx].items.slice(0, params.itemIdx).concat(newList[params.grpIdx].items.slice(params.itemIdx + 1))\n        //     return newList\n        // })\n    }\n\n    // const update = (data, params) => {\n    //     let newList = [...list];\n    //     newList[params.grpIdx].items[params.itemIdx] = {\n    //         name: data.name,\n    //         email: data.email,\n    //         phone: data.phone\n    //     }\n\n    //     setList(newList);\n    // }\n\n    const update = (field, text, params) => {\n\n        let newList = [...list];\n        newList[params.grpIdx].items[params.itemIdx][field] = text;\n        setList(newList);\n        // setList(oldList => {\n        //     let newList = JSON.parse(JSON.stringify(oldList))\n        //     newList[params.grpIdx].items[params.itemIdx][field] = text\n        //     return newList\n        // })\n        // textInput.current.value = ''\n        // setEditTitle(false)\n    }\n\n    const getStyles = (params) => {\n        const currentItem = dragItem.current\n        if (currentItem.grpIdx === params.grpIdx && currentItem.itemIdx === params.itemIdx) {\n            return 'current dnd-item'\n        }\n        return 'dnd-item'\n    }\n\n    return (\n        <div className='dnd-header'>\n            <div className='drag-n-drop' id={dragging ? 'dragging' : ''}>\n                {list.map((grp, grpIdx) => (\n                    <div key={grpIdx} \n                         className='dnd-group'\n                         onDragEnter={dragging && !grp.items.length ? (e) => handleDragEnter(e, { grpIdx, itemIdx: 0 }) : null}>\n                        <div className='group-title'>{grp.title}</div>\n                        {grp.items ? grp.items.map((item, itemIdx) => (\n                            <div draggable\n                                onDragStart={(e) => { handleDragStart(e, { grpIdx, itemIdx }) }}\n                                onDragEnter={dragging ? (e) => { handleDragEnter(e, { grpIdx, itemIdx }) } : null}\n                                key={itemIdx}\n                                className={dragging ? getStyles({ grpIdx, itemIdx }) : 'dnd-item'}>\n                                <Item item={item}\n                                      grpIdx={grpIdx}\n                                      itemIdx={itemIdx}\n                                      update={update}\n                                      removeItem={removeItem}\n                                      addComment={addComment}\n                                      removeComment={removeComment}\n                                />\n                                {/* <div>\n                                    <p>{item.title.length ? item.title : 'Name'}</p>\n                                    <button onClick={() => setEditTitle(!editTitle)}>+</button>\n                                    <div id={!editTitle ? 'hide' : ''}>\n                                        <input type=\"text\" ref={textInput} />\n                                        <button onClick={() => update(textInput.current.value, { grpIdx, itemIdx })}>Update</button>\n                                    </div>\n                                    <button onClick={() => removeItem({ grpIdx, itemIdx })}>Remove</button>\n                                </div> */}\n                            </div>\n                        )) : null}\n                        {grp.title === 'Applied' ? <AddItem grpIdx={grpIdx} addItems={addItems}/> : null}\n                        \n                    </div>\n                ))}\n            </div>\n\n        </div>\n    )\n}","import React from 'react';\nimport { DND } from './component/dnd';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DND/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n"],"sourceRoot":""}